"Setup kind repositories and rules"

load("@aspect_bazel_lib//lib:repo_utils.bzl", "repo_utils")

# Platform names follow the platform naming convention in @aspect_bazel_lib//lib:repo_utils.bzl
KIND_PLATFORMS = {
    "darwin_amd64": struct(
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:x86_64",
        ],
    ),
    "darwin_arm64": struct(
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:aarch64",
        ],
    ),
    "linux_amd64": struct(
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:x86_64",
        ],
    ),
    "linux_arm64": struct(
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:aarch64",
        ],
    ),
    "windows_amd64": struct(
        compatible_with = [
            "@platforms//os:windows",
            "@platforms//cpu:x86_64",
        ],
    ),
}

DEFAULT_KIND_VERSION = "0.29.0"

KIND_VERSIONS = {
    "0.29.0": {
        "darwin_amd64": "3eb0d4de25b854f34ea8ce8a3cbe15054fc03bc962b03e96fd10664b829fb6ed",
        "darwin_arm64": "314d8f1428842fd1ba2110fd0052a0f0b3ab5773ab1bdcdad1ff036e913310c9",
        "linux_amd64": "c72eda46430f065fb45c5f70e7c957cc9209402ef309294821978677c8fb3284",
        "linux_arm64": "03d45095dbd9cc1689f179a3e5e5da24b77c2d1b257d7645abf1b4174bebcf2a",
        "windows_amd64": "7ea3e9af902ddc4ed773704ab932175bfec8eafffff27c4cad6c2f397cd6e4ee",
    },
}

KIND_NODE_IMAGES = {
    "0.29.0": {
        "1.31": "kindest/node:v1.31.9@sha256:b94a3a6c06198d17f59cca8c6f486236fa05e2fb359cbd75dabbfc348a10b211",
        "1.32": "kindest/node:v1.32.5@sha256:e3b2327e3a5ab8c76f5ece68936e4cafaa82edf58486b769727ab0b3b97a5b0d",
        "1.33": "kindest/node:v1.33.1@sha256:050072256b9a903bd914c0b2866828150cb229cea0efe5892e2b644d5dd3b34f",
    },
}

def _kind_toolchains_repo_impl(rctx):
    build = ""

    for [platform, meta] in KIND_PLATFORMS.items():
        build += """
toolchain(
    name = "{platform}_toolchain",
    exec_compatible_with = {compatible_with},
    toolchain = "@{user_repository_name}_{platform}//:kind_toolchain",
    toolchain_type = "@io_github_janhicken_rules_kubebuilder//kubebuilder:kind_toolchain",
)
""".format(
            platform = platform,
            user_repository_name = rctx.attr.user_repository_name,
            compatible_with = meta.compatible_with,
        )

    # Base BUILD file for this repository
    rctx.file("BUILD", build)

kind_toolchains_repo = repository_rule(
    _kind_toolchains_repo_impl,
    doc = """Creates a repository with toolchain definitions for all known platforms
     which can be registered or selected.""",
    attrs = {
        "user_repository_name": attr.string(doc = "Base name for toolchains repository"),
    },
)

def _kind_platform_repo_impl(rctx):
    # https://github.com/kubernetes-sigs/kind/releases/download/v0.29.0/kind-darwin-amd64
    url = "https://github.com/kubernetes-sigs/kind/releases/download/v{0}/kind-{1}".format(
        rctx.attr.version,
        rctx.attr.platform.replace("_", "-"),
    )

    rctx.download(
        url = url,
        output = "kind",
        executable = True,
        sha256 = KIND_VERSIONS[rctx.attr.version][rctx.attr.platform],
    )
    node_image = KIND_NODE_IMAGES[rctx.attr.version][rctx.attr.kubernetes_version]
    build = """# @generated by @io_github_janhicken_rules_kubebuilder//kubebuilder/private:kind_toolchain.bzl
load("@io_github_janhicken_rules_kubebuilder//kubebuilder:toolchain.bzl", "kind_toolchain")
exports_files(["kind"])
kind_toolchain(
    name = "kind_toolchain",
    bin = "kind",
    node_image = "{0}",
    visibility = ["//visibility:public"],
)
""".format(node_image)

    # Base BUILD file for this repository
    rctx.file("BUILD", build)

kind_platform_repo = repository_rule(
    implementation = _kind_platform_repo_impl,
    doc = "Fetch external tools needed for the kind toolchain",
    attrs = {
        "kubernetes_version": attr.string(mandatory = True),
        "platform": attr.string(mandatory = True, values = KIND_PLATFORMS.keys()),
        "version": attr.string(mandatory = True, values = KIND_VERSIONS.keys()),
    },
)

def _kind_host_alias_repo(rctx):
    # Base BUILD file for this repository
    rctx.file("BUILD", """# @generated by @io_github_janhicken_rules_kubebuilder//kubebuilder/private:kind_toolchain.bzl
package(default_visibility = ["//visibility:public"])
exports_files(["kind"])
""")

    rctx.symlink("../{name}_{platform}/kind".format(
        name = rctx.attr.name,
        platform = repo_utils.platform(rctx),
    ), "kind")

kind_host_alias_repo = repository_rule(
    _kind_host_alias_repo,
    doc = """Creates a repository with a shorter name meant for the host platform, which contains
    a BUILD file that exports symlinks to the host platform's binaries
    """,
)
