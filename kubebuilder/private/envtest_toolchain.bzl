"Setup envtest repositories and rules"

load("@aspect_bazel_lib//lib:base64.bzl", "base64")
load("@aspect_bazel_lib//lib:repo_utils.bzl", "repo_utils")
load("@aspect_bazel_lib//lib:strings.bzl", "chr")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load(":envtest_releases.bzl", "ENVTEST_RELEASES")

# Platform names follow the platform naming convention in @aspect_bazel_lib//lib:repo_utils.bzl
ENVTEST_PLATFORMS = {
    "darwin_amd64": struct(
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:x86_64",
        ],
    ),
    "darwin_arm64": struct(
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:aarch64",
        ],
    ),
    "linux_amd64": struct(
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:x86_64",
        ],
    ),
    "linux_arm64": struct(
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:aarch64",
        ],
    ),
    "linux_ppc64le": struct(
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:ppc",
        ],
    ),
    "linux_s390x": struct(
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:s390x",
        ],
    ),
    "windows_amd64": struct(
        compatible_with = [
            "@platforms//os:windows",
            "@platforms//cpu:x86_64",
        ],
    ),
}

DEFAULT_ENVTEST_VERSION = "1.30.0"

def _hex_decode(input):
    if len(input) % 2 != 0:
        fail("Input string length must be even")

    outstr = ""
    for i in range(0, len(input), 2):
        num = int("0x" + input[i:(i + 2)], 16)
        outstr += chr(num)

    return outstr

def _envtest_toolchains_repo_impl(rctx):
    # Expose a concrete toolchain which is the result of Bazel resolving the toolchain
    # for the execution or target platform.
    # Workaround for https://github.com/bazelbuild/bazel/issues/14009
    defs_bzl = """# @generated by @io_github_janhicken_rules_kubebuilder//kubebuilder/private:envtest_toolchain.bzl

# Forward all the providers
def _resolved_toolchain_impl(ctx):
    toolchain_info = ctx.toolchains["@io_github_janhicken_rules_kubebuilder//kubebuilder:envtest_toolchain"]
    return [
        toolchain_info,
        toolchain_info.default,
        toolchain_info.envtest,
        toolchain_info.template_variables,
    ]

# Copied from java_toolchain_alias
# https://cs.opensource.google/bazel/bazel/+/master:tools/jdk/java_toolchain_alias.bzl
resolved_toolchain = rule(
    implementation = _resolved_toolchain_impl,
    toolchains = ["@io_github_janhicken_rules_kubebuilder//kubebuilder:envtest_toolchain"],
    incompatible_use_toolchain_transition = True,
)
"""
    rctx.file("defs.bzl", defs_bzl)

    build = """# @generated by @io_github_janhicken_rules_kubebuilder//kubebuilder/private:envtest_toolchain.bzl
#
# These can be registered in the workspace file or passed to --extra_toolchains flag.
# By default all these toolchains are registered by the envtest_register_toolchains macro
# so you don't normally need to interact with these targets.

load(":defs.bzl", "resolved_toolchain")

resolved_toolchain(name = "resolved_toolchain", visibility = ["//visibility:public"])

"""

    for [platform, meta] in ENVTEST_PLATFORMS.items():
        build += """
toolchain(
    name = "{platform}_toolchain",
    exec_compatible_with = {compatible_with},
    toolchain = "@{user_repository_name}_{platform}//:envtest_toolchain",
    toolchain_type = "@io_github_janhicken_rules_kubebuilder//kubebuilder:envtest_toolchain",
)
""".format(
            platform = platform,
            user_repository_name = rctx.attr.user_repository_name,
            compatible_with = meta.compatible_with,
        )

    # Base BUILD file for this repository
    rctx.file("BUILD", build)

envtest_toolchains_repo = repository_rule(
    _envtest_toolchains_repo_impl,
    doc = """Creates a repository with toolchain definitions for all known platforms
     which can be registered or selected.""",
    attrs = {
        "user_repository_name": attr.string(doc = "Base name for toolchains repository"),
    },
)

def envtest_platform_repo(name, version, platform):
    artifact_name = "envtest-v{version}-{platform}.tar.gz".format(
        version = version,
        platform = platform.replace("_", "-"),
    )
    artifact = ENVTEST_RELEASES["v" + version][artifact_name]

    http_archive(
        name = name,
        url = artifact["selfLink"],
        integrity = "sha512-" + base64.encode(_hex_decode(artifact["hash"])),
        strip_prefix = "controller-tools",
        build_file_content = """# generated by @io_github_janhicken_rules_kubebuilder//kubebuilder/private:envtest_toolchain.bzl
load("@io_github_janhicken_rules_kubebuilder//kubebuilder:toolchain.bzl", "envtest_toolchain")
exports_files(
    ["envtest"],
    visibility = ["//visibility:public"],
)
envtest_toolchain(name = "envtest_toolchain", bin_dir = "envtest", visibility = ["//visibility:public"])
""",
    )

def _envtest_host_alias_repo(rctx):
    rctx.file(
        "BUILD",
        """# generated by @io_github_janhicken_rules_kubebuilder//kubebuilder/private:envtest_toolchain.bzl
exports_files(
    ["envtest"],
    visibility = ["//visibility:public"],
)
""",
    )

    rctx.symlink("../{name}_{platform}/envtest".format(
        name = rctx.attr.name,
        platform = repo_utils.platform(rctx),
    ), "envtest")

envtest_host_alias_repo = repository_rule(
    implementation = _envtest_host_alias_repo,
)
