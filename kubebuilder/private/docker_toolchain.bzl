"Setup Docker repositories and rules"

DOCKER_PLATFORMS = {
    "linux_aarch64": struct(
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:aarch64",
        ],
    ),
    "linux_x86_64": struct(
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:x86_64",
        ],
    ),
    "mac_aarch64": struct(
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:aarch64",
        ],
    ),
    "mac_x86_64": struct(
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:x86_64",
        ],
    ),
    "win_x86_64": struct(
        compatible_with = [
            "@platforms//os:windows",
            "@platforms//cpu:x86_64",
        ],
    ),
}

DEFAULT_DOCKER_VERSION = "28.3.3"

DOCKER_VERSIONS = {
    "28.3.2": {
        "linux_aarch64": "sha384-ePUycEZ0qkH6yMvTbODSbyzzcIKRxqCrF4RpSrfA62YfVCHIYW1R389+CHgBwu9N",
        "linux_x86_64": "sha384-sUoiIXcJluH8tFnMyop1kTeuWvnWJtWzfj7qI6m04StbuiWLN0N3z/SwU65eHALA",
        "mac_aarch64": "sha384-A80cYTLVniH2Qeiin59k94CaU87/EKoezCQwvSPUSboOZpquUTXFZf0XkOUl4MRQ",
        "mac_x86_64": "sha384-DWE1a/Rf1LNx3Sb7vY6TrDSkRgbgOD3l5Gg+liK6mKqteoZKvKLB7zrR5MHu5hX/",
        "win_x86_64": "sha384-Gjf8iJT5tPM0vsLFGJrSK+cDZqDng275BVXtYKHrrtO2Mqk09tWyNcn4YdiTwnvL",
    },
    "28.3.3": {
        "linux_aarch64": "sha384-L9IIs91H6fCaaRo9VzsYeXRJ/ru3nKDgSBF9gGIx/t2QVRo4qPQs8YL331UqwHn5",
        "linux_x86_64": "sha384-gsYhx683QJnD6LtE3bYjI72HlNOxpgjDFqbVshUvebMnF2PMRsmJCAvGPF8DQKoz",
        "mac_aarch64": "sha384-bMLO4hEehE4VqnU4JQdkccCjvmrroJ6PIAXOXmXFAjRaY2GMD/6GDh31cpmHAO7A",
        "mac_x86_64": "sha384-s0yFObqJlEps0eAN2gmgRP24AhvyTgZboQOgo63BFfizGS3j/5ctWUG9tanhLEXA",
        "win_x86_64": "sha384-HmVQobOkZF6f9cDPT/swUAq5fsj+F9rMsfbYxgvg1ih+2Y/xKUbJEtq7/fQQhMFp",
    },
}

def _docker_toolchains_repo_impl(rctx):
    build = ""

    for [platform, meta] in DOCKER_PLATFORMS.items():
        build += """# @generated by @io_github_janhicken_rules_kubebuilder//kubebuilder/private:docker_toolchain.bzl
toolchain(
    name = "{platform}_toolchain",
    exec_compatible_with = {compatible_with},
    toolchain = "@{user_repository_name}_{platform}//:docker_toolchain",
    toolchain_type = "@io_github_janhicken_rules_kubebuilder//kubebuilder:docker_toolchain",
)
""".format(
            platform = platform,
            user_repository_name = rctx.attr.user_repository_name,
            compatible_with = meta.compatible_with,
        )

    # Base BUILD file for this repository
    rctx.file("BUILD", build)

docker_toolchains_repo = repository_rule(
    _docker_toolchains_repo_impl,
    doc = """Creates a repository with toolchain definitions for all known platforms
     which can be registered or selected.""",
    attrs = {
        "user_repository_name": attr.string(doc = "Base name for toolchains repository"),
    },
)

def _docker_platform_repo_impl(rctx):
    # https://download.docker.com/linux/static/stable/x86_64/docker-28.3.2.tgz
    platform_parts = rctx.attr.platform.split("_", 1)
    os = platform_parts[0]
    arch = platform_parts[1]
    url = "https://download.docker.com/{os}/static/stable/{arch}/docker-{version}.{type}".format(
        os = os,
        arch = arch,
        version = rctx.attr.version,
        type = "zip" if os == "win" else "tgz",
    )

    rctx.download_and_extract(
        url = url,
        integrity = DOCKER_VERSIONS[rctx.attr.version][rctx.attr.platform],
        stripPrefix = "docker",
    )
    build = """# @generated by @io_github_janhicken_rules_kubebuilder//kubebuilder/private:docker_toolchain.bzl
load("@io_github_janhicken_rules_kubebuilder//kubebuilder:toolchain.bzl", "docker_toolchain")
exports_files(["docker"])
docker_toolchain(
    name = "docker_toolchain",
    docker = "docker",
    visibility = ["//visibility:public"],
)
"""

    # Base BUILD file for this repository
    rctx.file("BUILD", build)

docker_platform_repo = repository_rule(
    implementation = _docker_platform_repo_impl,
    doc = "Fetch external tools needed for the Docker toolchain",
    attrs = {
        "platform": attr.string(mandatory = True, values = DOCKER_PLATFORMS.keys()),
        "version": attr.string(mandatory = True, values = DOCKER_VERSIONS.keys()),
    },
)
